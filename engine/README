Storage Engine used for KVS

1.Object
    One storage engine instance will be treated as cabinet or table or sth. else. 
    Operations: Open(Create), Close, Destroy, Dump, Arrange.

2.INDEX structure
    A hash_head + linklist or 2xtree. 
    Hash_head length is setted when creating storage engien instance. Whether contains values'space address is decided when loading instance.

3.Data layout in file-system.
    

4.Layout:
engine:
  index
  data.0
  data.1
  configure
  status
    

index:
  index_head: verison/id/visiable-engine-md5
  idx_slot: [key, space_offset, space_len]

data:
  data_head: version/visiable-engine-md5  (changed only once)
  [id,K,V]

  

5.Configure & Status file
  PATH
  func-INDEX
  func-dump
  func-arrange
  v

Configure can be read or written. but STATUS file only be read or changed by KVS-ENGINE.

/***************************/
没有data file与conf file的区别（包括加载区别）
Status/Meta File:
   DataVersion [SOLID, but for identify]
   cabinet_name[SOLID, but for consistency]
   key_len [SOLID, but for self-parse]
   id [STATUS-WHOLE]
   cur_data_file [STATUS]
   health: xxx-inconsitency [STATUS]
   Space-info [STATUS-SPACE]
   index_item_length [META-INFO]
   -End-Of-Visual- 
   [Black-8char-name][SIZE]index_item {} {} {} [META-INFO] 
//Check consistency with MetaFile, and Recovery(max).
DATA File:
  DataVersion[SOLID, for consistency]
  cabinet_name[SOLID],   name is data's property, not engine's.
  key_len[SOLID, for self-parse]
  -End-Of-Visual- 
  [Black-8char-name][SIZE]{id,k,v} {} {} {}

//things about Engine, but not data. 
//no verison. because version is a data-layout sign.
Configure: 
  EngineVersion
  cabinet_name //for human readable
  PATH
  func-INDEX: index_head_size
  func-dump
  func-arrange
  -End-Of-Visual- 
  


